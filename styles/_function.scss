// @function allows to re-use style with much more flexibility and dynamic arguments

@function fibonacci($n) {
    $sequence: 0 1;

    @for $_ from 1 through $n {
        $new: nth($sequence, length($sequence)) + nth($sequence, length($sequence) - 1);
        $sequence: append($sequence, $new);
    }

    @return nth($sequence, length($sequence));
}


.sidebar {
    float: left;
    margin-left: fibonacci(4) * 1px;
}


// Optional Argument(s)

@function invert($color, $amount: 100%) {
    $inverse: change-color($color, $hue: hue($color) + 180);
    @return mix($inverse, $color, $amount);
}

$primary-color: #036;

.header {
    background-color: invert($primary-color, 80%);
}

@function sum($numbers...) {
    $sum: 0;

    @each $number in $numbers {
        $sum: $sum + $number;
    }

    @return $sum;
}

.micro {
    width: sum(50px, 30px, 100px);
}



@use "sass:string";

@function str-insert($string, $insert, $index) {

    // Avoid making new strings if we don't need to.
    @if string.length($string)==0 {
        @return $insert;
    }

    $before: string.slice($string, 0, $index);
    $after: string.slice($string, $index);
    @return $before +$insert +$after;
}