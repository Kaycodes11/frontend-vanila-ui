//  No Argument

@mixin reset-list {
    margin: 0;
    padding: 0;
    list-style: none;
}

@mixin horizontal-list {
    @include reset-list;

    li {
        display: inline-block;

        margin: {
            left: -2px;
            right: 2em;
        }
    }
}

nav ul {
    @include horizontal-list;
}

// With Argument(s)

@mixin rtl($property, $ltr-value, $rtl-value) {
    #{$property}: $ltr-value;

    [dir=rtl] & {
        #{$property}: $rtl-value;
    }
}

.sidebar {
    @include rtl(float, left, right);
}


// Optional Argument(s)

@mixin replace-text($image, $x: 50%, $y: 50%) {
    text-indent: -99999em;
    overflow: hidden;
    text-align: left;

    background: {
        image: $image;
        repeat: no-repeat;
        position: $x $y;
    }
}

.mail-icon {
    @include replace-text(url("/images/mail.svg"), 0);
}

// ## Keyword Arguments

@mixin square($size, $radius: 0) {
    width: $size;
    height: $size;

    @if $radius !=0 {
        border-radius: $radius;
    }
}

.avatar {
    @include square(100px, $radius: 4px);
}

// Arbitary Argument(s)

@mixin order($height, $selectors...) {
    @for $i from 0 to length($selectors) {
        #{nth($selectors, $i + 1)} {
            position: absolute;
            height: $height;
            margin-top: $i * $height;
        }
    }
}

@include order(150px, "input.name", "input.address", "input.zip");

/*

input.name {
  position: absolute;
  height: 150px;
  margin-top: 0px;
}

input.address {
  position: absolute;
  height: 150px;
  margin-top: 150px;
}

input.zip {
  position: absolute;
  height: 150px;
  margin-top: 300px;
}
*/

// Taking Arbiraty Keyword Argument(s)

@use "sass:meta";

@mixin syntax-colors($args...) {
    @debug meta.keywords($args);
    // (string: #080, comment: #800, variable: #60b)

    @each $name, $color in meta.keywords($args) {
        pre span.stx-#{$name} {
            color: $color;
        }
    }
}

@include syntax-colors($string: #080, $comment: #800, $variable: #60b);

// $form-selectors: "input.name", "input.address", "input.zip" !default;

// @include order(150px, $form-selectors...);


// @mixin btn($args...) {
//     @warn "The btn() mixin is deprecated. Include button() instead.";
//     @include button($args...);
// }


// ## Content Block or Content Projection

@mixin hover {
    &:not([disabled]):hover {
        @content;
    }
}

.button {
    border: 1px solid black;

    @include hover {
        border-width: 2px;
    }
}

// passing argument to Content Block

@mixin media($types...) {
    @each $type in $types {
        @media #{$type} {
            @content($type);
        }
    }
}

@include media(screen, print) using ($type) {
    h1 {
        font-size: 40px;

        @if $type ==print {
            font-family: Calluna;
        }
    }
}